{"version":3,"file":"frappe-gantt.min.js","sources":["../src/svg_utils.js","../src/arrow.js","../src/date_utils.js","../src/bar.js","../src/popup.js","../src/index.js"],"sourcesContent":["export function $(expr, con) {\r\n    return typeof expr === 'string'\r\n        ? (con || document).querySelector(expr)\r\n        : expr || null;\r\n}\r\n\r\nexport function createSVG(tag, attrs) {\r\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    for (let attr in attrs) {\r\n        if (attr === 'append_to') {\r\n            const parent = attrs.append_to;\r\n            parent.appendChild(elem);\r\n        } else if (attr === 'innerHTML') {\r\n            elem.innerHTML = attrs.innerHTML;\r\n        } else {\r\n            elem.setAttribute(attr, attrs[attr]);\r\n        }\r\n    }\r\n    return elem;\r\n}\r\n\r\nexport function animateSVG(svgElement, attr, from, to) {\r\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\r\n\r\n    if (animatedSvgElement === svgElement) {\r\n        // triggered 2nd time programmatically\r\n        // trigger artificial click event\r\n        const event = document.createEvent('HTMLEvents');\r\n        event.initEvent('click', true, true);\r\n        event.eventName = 'click';\r\n        animatedSvgElement.dispatchEvent(event);\r\n    }\r\n}\r\n\r\nfunction getAnimationElement(\r\n    svgElement,\r\n    attr,\r\n    from,\r\n    to,\r\n    dur = '0.4s',\r\n    begin = '0.1s'\r\n) {\r\n    const animEl = svgElement.querySelector('animate');\r\n    if (animEl) {\r\n        $.attr(animEl, {\r\n            attributeName: attr,\r\n            from,\r\n            to,\r\n            dur,\r\n            begin: 'click + ' + begin, // artificial click\r\n        });\r\n        return svgElement;\r\n    }\r\n\r\n    const animateElement = createSVG('animate', {\r\n        attributeName: attr,\r\n        from,\r\n        to,\r\n        dur,\r\n        begin,\r\n        calcMode: 'spline',\r\n        values: from + ';' + to,\r\n        keyTimes: '0; 1',\r\n        keySplines: cubic_bezier('ease-out'),\r\n    });\r\n    svgElement.appendChild(animateElement);\r\n\r\n    return svgElement;\r\n}\r\n\r\nfunction cubic_bezier(name) {\r\n    return {\r\n        ease: '.25 .1 .25 1',\r\n        linear: '0 0 1 1',\r\n        'ease-in': '.42 0 1 1',\r\n        'ease-out': '0 0 .58 1',\r\n        'ease-in-out': '.42 0 .58 1',\r\n    }[name];\r\n}\r\n\r\n$.on = (element, event, selector, callback) => {\r\n    if (!callback) {\r\n        callback = selector;\r\n        $.bind(element, event, callback);\r\n    } else {\r\n        $.delegate(element, event, selector, callback);\r\n    }\r\n};\r\n\r\n$.off = (element, event, handler) => {\r\n    element.removeEventListener(event, handler);\r\n};\r\n\r\n$.bind = (element, event, callback) => {\r\n    event.split(/\\s+/).forEach(function (event) {\r\n        element.addEventListener(event, callback);\r\n    });\r\n};\r\n\r\n$.delegate = (element, event, selector, callback) => {\r\n    element.addEventListener(event, function (e) {\r\n        const delegatedTarget = e.target.closest(selector);\r\n        if (delegatedTarget) {\r\n            e.delegatedTarget = delegatedTarget;\r\n            callback.call(this, e, delegatedTarget);\r\n        }\r\n    });\r\n};\r\n\r\n$.closest = (selector, element) => {\r\n    if (!element) return null;\r\n\r\n    if (element.matches(selector)) {\r\n        return element;\r\n    }\r\n\r\n    return $.closest(selector, element.parentNode);\r\n};\r\n\r\n$.attr = (element, attr, value) => {\r\n    if (!value && typeof attr === 'string') {\r\n        return element.getAttribute(attr);\r\n    }\r\n\r\n    if (typeof attr === 'object') {\r\n        for (let key in attr) {\r\n            $.attr(element, key, attr[key]);\r\n        }\r\n        return;\r\n    }\r\n\r\n    element.setAttribute(attr, value);\r\n};\r\n","import { createSVG } from './svg_utils';\r\n\r\nexport default class Arrow {\r\n    constructor(gantt, from_task, to_task) {\r\n        this.gantt = gantt;\r\n        this.from_task = from_task;\r\n        this.to_task = to_task;\r\n\r\n        this.calculate_path();\r\n        this.draw();\r\n    }\r\n\r\n    calculate_path() {\r\n        let start_x =\r\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\r\n\r\n        const condition = () =>\r\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\r\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\r\n\r\n        while (condition()) {\r\n            start_x -= 10;\r\n        }\r\n\r\n        const start_y =\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.bar_height +\r\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\r\n                this.from_task.task._index +\r\n            this.gantt.options.padding;\r\n\r\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\r\n        const end_y =\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.bar_height / 2 +\r\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\r\n                this.to_task.task._index +\r\n            this.gantt.options.padding;\r\n\r\n        const from_is_below_to =\r\n            this.from_task.task._index > this.to_task.task._index;\r\n        const curve = this.gantt.options.arrow_curve;\r\n        const clockwise = from_is_below_to ? 1 : 0;\r\n        const curve_y = from_is_below_to ? -curve : curve;\r\n        const offset = from_is_below_to\r\n            ? end_y + this.gantt.options.arrow_curve\r\n            : end_y - this.gantt.options.arrow_curve;\r\n\r\n        this.path = `\r\n            M ${start_x} ${start_y}\r\n            V ${offset}\r\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\r\n            L ${end_x} ${end_y}\r\n            m -5 -5\r\n            l 5 5\r\n            l -5 5`;\r\n\r\n        if (\r\n            this.to_task.$bar.getX() <\r\n            this.from_task.$bar.getX() + this.gantt.options.padding\r\n        ) {\r\n            const down_1 = this.gantt.options.padding / 2 - curve;\r\n            const down_2 =\r\n                this.to_task.$bar.getY() +\r\n                this.to_task.$bar.getHeight() / 2 -\r\n                curve_y;\r\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\r\n\r\n            this.path = `\r\n                M ${start_x} ${start_y}\r\n                v ${down_1}\r\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\r\n                H ${left}\r\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\r\n                V ${down_2}\r\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\r\n                L ${end_x} ${end_y}\r\n                m -5 -5\r\n                l 5 5\r\n                l -5 5`;\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.element = createSVG('path', {\r\n            d: this.path,\r\n            'data-from': this.from_task.task.id,\r\n            'data-to': this.to_task.task.id,\r\n        });\r\n    }\r\n\r\n    update() {\r\n        this.calculate_path();\r\n        this.element.setAttribute('d', this.path);\r\n    }\r\n}\r\n","const YEAR = 'year';\r\nconst MONTH = 'month';\r\nconst DAY = 'day';\r\nconst HOUR = 'hour';\r\nconst MINUTE = 'minute';\r\nconst SECOND = 'second';\r\nconst MILLISECOND = 'millisecond';\r\n\r\nconst month_names = {\r\n    en: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n    ],\r\n    gb: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n    ],\r\n    de: [\r\n        'Januar',\r\n        'Februar',\r\n        'März',\r\n        'April',\r\n        'Mai',\r\n        'Juni',\r\n        'Juli',\r\n        'August',\r\n        'September',\r\n        'Oktober',\r\n        'November',\r\n        'Dezember',\r\n    ],\r\n    es: [\r\n        'Enero',\r\n        'Febrero',\r\n        'Marzo',\r\n        'Abril',\r\n        'Mayo',\r\n        'Junio',\r\n        'Julio',\r\n        'Agosto',\r\n        'Septiembre',\r\n        'Octubre',\r\n        'Noviembre',\r\n        'Diciembre',\r\n    ],\r\n    it: [\r\n        \"Gennaio\",\r\n        \"Febbraio\",\r\n        \"Marzo\",\r\n        \"Aprile\",\r\n        \"Maggio\",\r\n        \"Giugno\",\r\n        \"Luglio\",\r\n        \"Agosto\",\r\n        \"Settembre\",\r\n        \"Ottobre\",\r\n        \"Novembre\", \r\n        \"Dicembre\"\r\n    ],\r\n    ru: [\r\n        'Январь',\r\n        'Февраль',\r\n        'Март',\r\n        'Апрель',\r\n        'Май',\r\n        'Июнь',\r\n        'Июль',\r\n        'Август',\r\n        'Сентябрь',\r\n        'Октябрь',\r\n        'Ноябрь',\r\n        'Декабрь',\r\n    ],\r\n    ptBr: [\r\n        'Janeiro',\r\n        'Fevereiro',\r\n        'Março',\r\n        'Abril',\r\n        'Maio',\r\n        'Junho',\r\n        'Julho',\r\n        'Agosto',\r\n        'Setembro',\r\n        'Outubro',\r\n        'Novembro',\r\n        'Dezembro',\r\n    ],\r\n    fr: [\r\n        'Janvier',\r\n        'Février',\r\n        'Mars',\r\n        'Avril',\r\n        'Mai',\r\n        'Juin',\r\n        'Juillet',\r\n        'Août',\r\n        'Septembre',\r\n        'Octobre',\r\n        'Novembre',\r\n        'Décembre',\r\n    ],\r\n    tr: [\r\n        'Ocak',\r\n        'Şubat',\r\n        'Mart',\r\n        'Nisan',\r\n        'Mayıs',\r\n        'Haziran',\r\n        'Temmuz',\r\n        'Ağustos',\r\n        'Eylül',\r\n        'Ekim',\r\n        'Kasım',\r\n        'Aralık',\r\n    ],\r\n    zh: [\r\n        '一月',\r\n        '二月',\r\n        '三月',\r\n        '四月',\r\n        '五月',\r\n        '六月',\r\n        '七月',\r\n        '八月',\r\n        '九月',\r\n        '十月',\r\n        '十一月',\r\n        '十二月',\r\n    ],\r\n};\r\n\r\nexport default {\r\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\r\n        if (date instanceof Date) {\r\n            return date;\r\n        }\r\n        if (typeof date === 'string') {\r\n            let date_parts, time_parts;\r\n            const parts = date.split(' ');\r\n\r\n            date_parts = parts[0]\r\n                .split(date_separator)\r\n                .map((val) => parseInt(val, 10));\r\n            time_parts = parts[1] && parts[1].split(time_separator);\r\n\r\n            // month is 0 indexed\r\n            date_parts[1] = date_parts[1] - 1;\r\n\r\n            let vals = date_parts;\r\n\r\n            if (time_parts && time_parts.length) {\r\n                if (time_parts.length == 4) {\r\n                    time_parts[3] = '0.' + time_parts[3];\r\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\r\n                }\r\n                vals = vals.concat(time_parts);\r\n            }\r\n\r\n            return new Date(...vals);\r\n        }\r\n    },\r\n\r\n    to_string(date, with_time = false) {\r\n        if (!(date instanceof Date)) {\r\n            throw new TypeError('Invalid argument type');\r\n        }\r\n        const vals = this.get_date_values(date).map((val, i) => {\r\n            if (i === 1) {\r\n                // add 1 for month\r\n                val = val + 1;\r\n            }\r\n\r\n            if (i === 6) {\r\n                return padStart(val + '', 3, '0');\r\n            }\r\n\r\n            return padStart(val + '', 2, '0');\r\n        });\r\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\r\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\r\n\r\n        return date_string + (with_time ? ' ' + time_string : '');\r\n    },\r\n\r\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\r\n        const values = this.get_date_values(date).map((d) => padStart(d, 2, 0));\r\n        const format_map = {\r\n            YYYY: values[0],\r\n            MM: padStart(+values[1] + 1, 2, 0),\r\n            DD: values[2],\r\n            HH: values[3],\r\n            mm: values[4],\r\n            ss: values[5],\r\n            SSS: values[6],\r\n            D: values[2],\r\n            MMMM: month_names[lang][+values[1]],\r\n            MMM: month_names[lang][+values[1]],\r\n        };\r\n\r\n        let str = format_string;\r\n        const formatted_values = [];\r\n\r\n        Object.keys(format_map)\r\n            .sort((a, b) => b.length - a.length) // big string first\r\n            .forEach((key) => {\r\n                if (str.includes(key)) {\r\n                    str = str.replace(key, `$${formatted_values.length}`);\r\n                    formatted_values.push(format_map[key]);\r\n                }\r\n            });\r\n\r\n        formatted_values.forEach((value, i) => {\r\n            str = str.replace(`$${i}`, value);\r\n        });\r\n\r\n        return str;\r\n    },\r\n\r\n    diff(date_a, date_b, scale = DAY) {\r\n        let milliseconds, seconds, hours, minutes, days, months, years;\r\n\r\n        milliseconds = date_a - date_b;\r\n        seconds = milliseconds / 1000;\r\n        minutes = seconds / 60;\r\n        hours = minutes / 60;\r\n        days = hours / 24;\r\n        months = days / 30;\r\n        years = months / 12;\r\n\r\n        if (!scale.endsWith('s')) {\r\n            scale += 's';\r\n        }\r\n\r\n        return Math.floor(\r\n            {\r\n                milliseconds,\r\n                seconds,\r\n                minutes,\r\n                hours,\r\n                days,\r\n                months,\r\n                years,\r\n            }[scale]\r\n        );\r\n    },\r\n\r\n    today() {\r\n        const vals = this.get_date_values(new Date()).slice(0, 3);\r\n        return new Date(...vals);\r\n    },\r\n\r\n    now() {\r\n        return new Date();\r\n    },\r\n\r\n    add(date, qty, scale) {\r\n        qty = parseInt(qty, 10);\r\n        const vals = [\r\n            date.getFullYear() + (scale === YEAR ? qty : 0),\r\n            date.getMonth() + (scale === MONTH ? qty : 0),\r\n            date.getDate() + (scale === DAY ? qty : 0),\r\n            date.getHours() + (scale === HOUR ? qty : 0),\r\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\r\n            date.getSeconds() + (scale === SECOND ? qty : 0),\r\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\r\n        ];\r\n        return new Date(...vals);\r\n    },\r\n\r\n    start_of(date, scale) {\r\n        const scores = {\r\n            [YEAR]: 6,\r\n            [MONTH]: 5,\r\n            [DAY]: 4,\r\n            [HOUR]: 3,\r\n            [MINUTE]: 2,\r\n            [SECOND]: 1,\r\n            [MILLISECOND]: 0,\r\n        };\r\n\r\n        function should_reset(_scale) {\r\n            const max_score = scores[scale];\r\n            return scores[_scale] <= max_score;\r\n        }\r\n\r\n        const vals = [\r\n            date.getFullYear(),\r\n            should_reset(YEAR) ? 0 : date.getMonth(),\r\n            should_reset(MONTH) ? 1 : date.getDate(),\r\n            should_reset(DAY) ? 0 : date.getHours(),\r\n            should_reset(HOUR) ? 0 : date.getMinutes(),\r\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\r\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\r\n        ];\r\n\r\n        return new Date(...vals);\r\n    },\r\n\r\n    clone(date) {\r\n        return new Date(...this.get_date_values(date));\r\n    },\r\n\r\n    get_date_values(date) {\r\n        return [\r\n            date.getFullYear(),\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds(),\r\n        ];\r\n    },\r\n\r\n    get_days_in_month(date) {\r\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n        const month = date.getMonth();\r\n\r\n        if (month !== 1) {\r\n            return no_of_days[month];\r\n        }\r\n\r\n        // Feb\r\n        const year = date.getFullYear();\r\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\r\n            return 29;\r\n        }\r\n        return 28;\r\n    },\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\r\nfunction padStart(str, targetLength, padString) {\r\n    str = str + '';\r\n    targetLength = targetLength >> 0;\r\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\r\n    if (str.length > targetLength) {\r\n        return String(str);\r\n    } else {\r\n        targetLength = targetLength - str.length;\r\n        if (targetLength > padString.length) {\r\n            padString += padString.repeat(targetLength / padString.length);\r\n        }\r\n        return padString.slice(0, targetLength) + String(str);\r\n    }\r\n}\r\n","import date_utils from './date_utils';\r\nimport { $, animateSVG, createSVG } from './svg_utils';\r\n\r\nexport default class Bar {\r\n    constructor(gantt, task, context) {\r\n        this.set_defaults(gantt, task, context);\r\n        this.prepare();\r\n        this.draw();\r\n        this.bind();\r\n    }\r\n\r\n    set_defaults(gantt, task, context) {\r\n        this.action_completed = false;\r\n        this.gantt = gantt;\r\n        this.task = task;\r\n        this.context = context\r\n    }\r\n\r\n    prepare() {\r\n        this.prepare_values();\r\n        this.prepare_helpers();\r\n    }\r\n\r\n    prepare_values() {\r\n        this.invalid = this.task.invalid;\r\n        this.height = this.gantt.options.bar_height;\r\n        this.x = this.compute_x();\r\n        this.y = this.compute_y();\r\n        this.corner_radius = this.gantt.options.bar_corner_radius;\r\n        this.duration =\r\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\r\n            this.gantt.options.step;\r\n        this.width = this.gantt.options.column_width * this.duration;\r\n        this.progress_width =\r\n            this.gantt.options.column_width *\r\n                this.duration *\r\n                (this.task.progress / 100) || 0;\r\n        this.group = createSVG('g', {\r\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\r\n            'data-id': this.task.id,\r\n        });\r\n        this.bar_group = createSVG('g', {\r\n            class: 'bar-group',\r\n            append_to: this.group,\r\n        });\r\n        this.handle_group = createSVG('g', {\r\n            class: 'handle-group',\r\n            append_to: this.group,\r\n        });\r\n    }\r\n\r\n    prepare_helpers() {\r\n        SVGElement.prototype.getX = function () {\r\n            return +this.getAttribute('x');\r\n        };\r\n        SVGElement.prototype.getY = function () {\r\n            return +this.getAttribute('y');\r\n        };\r\n        SVGElement.prototype.getWidth = function () {\r\n            return +this.getAttribute('width');\r\n        };\r\n        SVGElement.prototype.getHeight = function () {\r\n            return +this.getAttribute('height');\r\n        };\r\n        SVGElement.prototype.getEndX = function () {\r\n            return this.getX() + this.getWidth();\r\n        };\r\n    }\r\n\r\n    draw() {\r\n        this.draw_bar();\r\n        this.draw_progress_bar();\r\n        this.draw_label();\r\n        this.draw_resize_handles();\r\n    }\r\n\r\n    draw_bar() {\r\n        this.$bar = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'bar',\r\n            append_to: this.bar_group,\r\n        });\r\n\r\n        animateSVG(this.$bar, 'width', 0, this.width);\r\n\r\n        if (this.invalid) {\r\n            this.$bar.classList.add('bar-invalid');\r\n        }\r\n    }\r\n\r\n    draw_progress_bar() {\r\n        if (this.invalid) return;\r\n        this.$bar_progress = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y + 15,\r\n            width: this.progress_width,\r\n            height: 5,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'bar-progress',\r\n            append_to: this.bar_group,\r\n        });\r\n\r\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\r\n    }\r\n\r\n    draw_label() {\r\n        createSVG('text', {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2,\r\n            innerHTML: this.task.name,\r\n            class: 'bar-label',\r\n            append_to: this.bar_group,\r\n        });\r\n        // labels get BBox in the next tick\r\n        requestAnimationFrame(() => this.update_label_position());\r\n    }\r\n\r\n    draw_resize_handles() {\r\n        if (this.invalid) return;\r\n\r\n        const bar = this.$bar;\r\n        const handle_width = 8;\r\n\r\n        createSVG('rect', {\r\n            x: bar.getX() + bar.getWidth() - 9,\r\n            y: bar.getY() + 1,\r\n            width: handle_width,\r\n            height: this.height - 2,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'handle right',\r\n            append_to: this.handle_group,\r\n        });\r\n\r\n        createSVG('rect', {\r\n            x: bar.getX() + 1,\r\n            y: bar.getY() + 1,\r\n            width: handle_width,\r\n            height: this.height - 2,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'handle left',\r\n            append_to: this.handle_group,\r\n        });\r\n\r\n        if (this.task.progress && this.task.progress < 100) {\r\n            this.$handle_progress = createSVG('polygon', {\r\n                points: this.get_progress_polygon_points().join(','),\r\n                class: 'handle progress',\r\n                append_to: this.handle_group,\r\n            });\r\n        }\r\n    }\r\n\r\n    get_progress_polygon_points() {\r\n        const bar_progress = this.$bar_progress;\r\n        return [\r\n            bar_progress.getEndX() - 5,\r\n            bar_progress.getY() + bar_progress.getHeight(),\r\n            bar_progress.getEndX() + 5,\r\n            bar_progress.getY() + bar_progress.getHeight(),\r\n            bar_progress.getEndX(),\r\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\r\n        ];\r\n    }\r\n\r\n    bind() {\r\n        if (this.invalid) return;\r\n        this.setup_click_event();\r\n    }\r\n\r\n    setup_click_event() {\r\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\r\n            if (this.action_completed) {\r\n                // just finished a move action, wait for a few seconds\r\n                return;\r\n            }\r\n\r\n            this.show_popup();\r\n            this.gantt.unselect_all();\r\n            this.group.classList.add('active');\r\n        });\r\n\r\n        $.on(this.group, 'dblclick', (e) => {\r\n            if (this.action_completed) {\r\n                // just finished a move action, wait for a few seconds\r\n                return;\r\n            }\r\n\r\n            this.gantt.trigger_event('click', [this.task]);\r\n        });\r\n    }\r\n\r\n    show_popup() {\r\n        if (this.gantt.bar_being_dragged) return;\r\n\r\n        const start_date = date_utils.format(\r\n            this.task._start,\r\n            'MMM D',\r\n            this.gantt.options.language\r\n        );\r\n        const end_date = date_utils.format(\r\n            date_utils.add(this.task._end, -1, 'second'),\r\n            'MMM D',\r\n            this.gantt.options.language\r\n        );\r\n        const subtitle = start_date + ' - ' + end_date;\r\n\r\n        this.gantt.show_popup({\r\n            target_element: this.$bar,\r\n            title: this.task.name,\r\n            subtitle: subtitle,\r\n            task: this.task,\r\n            grid_size: {\r\n                height: this.context.grid_height,\r\n                width: this.context.grid_width\r\n            }\r\n        });\r\n    }\r\n\r\n    update_bar_position({ x = null, width = null }) {\r\n        const bar = this.$bar;\r\n        if (x) {\r\n            // get all x values of parent task\r\n            const xs = this.task.dependencies.map((dep) => {\r\n                return this.gantt.get_bar(dep).$bar.getX();\r\n            });\r\n            // child task must not go before parent\r\n            const valid_x = xs.reduce((prev, curr) => {\r\n                return x >= curr;\r\n            }, x);\r\n            if (!valid_x) {\r\n                width = null;\r\n                return;\r\n            }\r\n            this.update_attr(bar, 'x', x);\r\n        }\r\n        if (width && width >= this.gantt.options.column_width) {\r\n            this.update_attr(bar, 'width', width);\r\n        }\r\n        this.update_label_position();\r\n        this.update_handle_position();\r\n        this.update_progressbar_position();\r\n        this.update_arrow_position();\r\n    }\r\n\r\n    date_changed() {\r\n        let changed = false;\r\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\r\n\r\n        if (Number(this.task._start) !== Number(new_start_date)) {\r\n            changed = true;\r\n            this.task._start = new_start_date;\r\n        }\r\n\r\n        if (Number(this.task._end) !== Number(new_end_date)) {\r\n            changed = true;\r\n            this.task._end = new_end_date;\r\n        }\r\n\r\n        if (!changed) return;\r\n\r\n        this.gantt.trigger_event('date_change', [\r\n            this.task,\r\n            new_start_date,\r\n            date_utils.add(new_end_date, -1, 'second'),\r\n            this.context\r\n        ]);\r\n    }\r\n\r\n    progress_changed() {\r\n        const new_progress = this.compute_progress();\r\n        this.task.progress = new_progress;\r\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\r\n    }\r\n\r\n    set_action_completed() {\r\n        this.action_completed = true;\r\n        setTimeout(() => (this.action_completed = false), 1000);\r\n    }\r\n\r\n    compute_start_end_date() {\r\n        const bar = this.$bar;\r\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\r\n        const new_start_date = date_utils.add(\r\n            this.gantt.gantt_start,\r\n            x_in_units * this.gantt.options.step,\r\n            'hour'\r\n        );\r\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\r\n        const new_end_date = date_utils.add(\r\n            new_start_date,\r\n            width_in_units * this.gantt.options.step,\r\n            'hour'\r\n        );\r\n\r\n        return { new_start_date, new_end_date };\r\n    }\r\n\r\n    compute_progress() {\r\n        const progress =\r\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\r\n        return parseInt(progress, 10);\r\n    }\r\n\r\n    compute_x() {\r\n        const { step, column_width } = this.gantt.options;\r\n        const task_start = this.task._start;\r\n        const gantt_start = this.gantt.gantt_start;\r\n\r\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\r\n        let x = (diff / step) * column_width;\r\n\r\n        if (this.gantt.view_is('Month')) {\r\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\r\n            x = (diff * column_width) / 30;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    compute_y() {\r\n        return (\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.padding +\r\n            this.task._index * (this.height + this.gantt.options.padding)\r\n        );\r\n    }\r\n\r\n    get_snap_position(dx) {\r\n        let odx = dx,\r\n            rem,\r\n            position;\r\n\r\n        if (this.gantt.view_is('Week')) {\r\n            rem = dx % (this.gantt.options.column_width / 7);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 14\r\n                    ? 0\r\n                    : this.gantt.options.column_width / 7);\r\n        } else if (this.gantt.view_is('Month')) {\r\n            rem = dx % (this.gantt.options.column_width / 30);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 60\r\n                    ? 0\r\n                    : this.gantt.options.column_width / 30);\r\n        } else {\r\n            rem = dx % this.gantt.options.column_width;\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 2\r\n                    ? 0\r\n                    : this.gantt.options.column_width);\r\n        }\r\n        return position;\r\n    }\r\n\r\n    update_attr(element, attr, value) {\r\n        value = +value;\r\n        if (!isNaN(value)) {\r\n            element.setAttribute(attr, value);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    update_progressbar_position() {\r\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\r\n        this.$bar_progress.setAttribute(\r\n            'width',\r\n            this.$bar.getWidth() * (this.task.progress / 100)\r\n        );\r\n    }\r\n\r\n    update_label_position() {\r\n        const bar = this.$bar,\r\n            label = this.group.querySelector('.bar-label');\r\n\r\n        if (label.getBBox().width > bar.getWidth()) {\r\n            label.classList.add('big');\r\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\r\n        } else {\r\n            label.classList.remove('big');\r\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\r\n        }\r\n    }\r\n\r\n    update_handle_position() {\r\n        const bar = this.$bar;\r\n        this.handle_group\r\n            .querySelector('.handle.left')\r\n            .setAttribute('x', bar.getX() + 1);\r\n        this.handle_group\r\n            .querySelector('.handle.right')\r\n            .setAttribute('x', bar.getEndX() - 9);\r\n        const handle = this.group.querySelector('.handle.progress');\r\n        handle &&\r\n            handle.setAttribute('points', this.get_progress_polygon_points());\r\n    }\r\n\r\n    update_arrow_position() {\r\n        this.arrows = this.arrows || [];\r\n        for (let arrow of this.arrows) {\r\n            arrow.update();\r\n        }\r\n    }\r\n}\r\n\r\nfunction isFunction(functionToCheck) {\r\n    var getType = {};\r\n    return (\r\n        functionToCheck &&\r\n        getType.toString.call(functionToCheck) === '[object Function]'\r\n    );\r\n}\r\n","export default class Popup {\r\n    constructor(parent, custom_html, grid_size) {\r\n        this.parent = parent;\r\n        this.custom_html = custom_html;\r\n        this.grid_size = grid_size;\r\n        this.make();\r\n    }\r\n\r\n    make() {\r\n        this.parent.innerHTML = `\r\n            <div class=\"title\"></div>\r\n            <div class=\"subtitle\"></div>\r\n            <div class=\"pointer\"></div>\r\n        `;\r\n\r\n        this.hide();\r\n\r\n        this.title = this.parent.querySelector('.title');\r\n        this.subtitle = this.parent.querySelector('.subtitle');\r\n        this.pointer = this.parent.querySelector('.pointer');\r\n    }\r\n\r\n    show(options) {\r\n        if (!options.target_element) {\r\n            throw new Error('target_element is required to show popup');\r\n        }\r\n\r\n        \r\n        const target_element = options.target_element;\r\n\r\n        if (this.custom_html) {\r\n            let html = this.custom_html(options.task);\r\n            html += '<div class=\"pointer\"></div>';\r\n            this.parent.innerHTML = html;\r\n            this.pointer = this.parent.querySelector('.pointer');\r\n        } else {\r\n            // set data\r\n            this.title.innerHTML = options.title;\r\n            this.subtitle.innerHTML = options.subtitle;\r\n            this.parent.style.width = this.parent.clientWidth + 'px';\r\n        }\r\n\r\n        // set position\r\n        let position_meta;\r\n        if (target_element instanceof HTMLElement) {\r\n            position_meta = target_element.getBoundingClientRect();\r\n        } else if (target_element instanceof SVGElement) {\r\n            position_meta = options.target_element.getBBox();\r\n        }\r\n\r\n        const margin = 10\r\n        const right_side_space = (this.grid_size.width - position_meta.x - \r\n            position_meta.width - this.parent.clientWidth)\r\n        if (margin < right_side_space) {\r\n            options.position = 'right';\r\n        } else {\r\n            options.position = 'left'\r\n        }\r\n\r\n        if (options.position === 'left') {\r\n            this.parent.style.left = \r\n                (position_meta.x - this.parent.clientWidth - 10) + 'px';\r\n            this.parent.style.top = (position_meta.y - this.parent.clientHeight + position_meta.height) + 'px';\r\n\r\n            this.pointer.style.transform = 'rotateZ(270deg)';\r\n            this.pointer.style.left = (this.parent.clientWidth + 7) + 'px';\r\n            this.pointer.style.top = (this.parent.clientHeight - 10 - 2) + 'px';\r\n        } else {\r\n            this.parent.style.left =\r\n                position_meta.x + (position_meta.width + 10) + 'px';\r\n            this.parent.style.top = position_meta.y + 'px';\r\n\r\n            this.pointer.style.transform = 'rotateZ(90deg)';\r\n            this.pointer.style.left = '-7px';\r\n            this.pointer.style.top = '2px';\r\n        }\r\n\r\n        // show\r\n        this.parent.style.opacity = 1;\r\n    }\r\n\r\n    hide() {\r\n        this.parent.style.opacity = 0;\r\n        this.parent.style.left = 0;\r\n    }\r\n}\r\n","import Arrow from './arrow';\r\nimport Bar from './bar';\r\nimport date_utils from './date_utils';\r\nimport Popup from './popup';\r\nimport { $, createSVG } from './svg_utils';\r\n\r\nimport './gantt.scss';\r\n\r\nconst VIEW_MODE = {\r\n    MINUTE: '5 Minute',\r\n    HOUR: 'Hour',\r\n    QUARTER_DAY: 'Quarter Day',\r\n    HALF_DAY: 'Half Day',\r\n    DAY: 'Day',\r\n    WEEK: 'Week',\r\n    MONTH: 'Month',\r\n    YEAR: 'Year',\r\n};\r\n\r\nexport default class Gantt {\r\n    constructor(wrapper, tasks, options, context) {\r\n        this.setup_wrapper(wrapper);\r\n        this.setup_options(options);\r\n        this.setup_tasks(tasks);\r\n        this.setup_context(context)\r\n        // initialize with default view mode\r\n        this.change_view_mode();\r\n        this.bind_events();\r\n    }\r\n\r\n    setup_wrapper(element) {\r\n        let svg_element, wrapper_element;\r\n\r\n        // CSS Selector is passed\r\n        if (typeof element === 'string') {\r\n            element = document.querySelector(element);\r\n        }\r\n\r\n        // get the SVGElement\r\n        if (element instanceof HTMLElement) {\r\n            wrapper_element = element;\r\n            svg_element = element.querySelector('svg');\r\n        } else if (element instanceof SVGElement) {\r\n            svg_element = element;\r\n        } else {\r\n            throw new TypeError(\r\n                'Frappé Gantt only supports usage of a string CSS selector,' +\r\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\r\n            );\r\n        }\r\n\r\n        // svg element\r\n        if (!svg_element) {\r\n            // create it\r\n            this.$svg = createSVG('svg', {\r\n                append_to: wrapper_element,\r\n                class: 'gantt',\r\n            });\r\n        } else {\r\n            this.$svg = svg_element;\r\n            this.$svg.classList.add('gantt');\r\n        }\r\n\r\n        // wrapper element\r\n        this.$container = document.createElement('div');\r\n        this.$container.classList.add('gantt-container');\r\n\r\n        const parent_element = this.$svg.parentElement;\r\n        parent_element.appendChild(this.$container);\r\n        this.$container.appendChild(this.$svg);\r\n\r\n        // popup wrapper\r\n        this.popup_wrapper = document.createElement('div');\r\n        this.popup_wrapper.classList.add('popup-wrapper');\r\n        this.$container.appendChild(this.popup_wrapper);\r\n    }\r\n\r\n    setup_options(options) {\r\n        const default_options = {\r\n            header_height: 50,\r\n            column_width: 30,\r\n            step: 24,\r\n            view_modes: [...Object.values(VIEW_MODE)],\r\n            bar_height: 20,\r\n            bar_corner_radius: 3,\r\n            arrow_curve: 5,\r\n            padding: 18,\r\n            view_mode: 'Day',\r\n            date_format: 'YYYY-MM-DD',\r\n            popup_trigger: 'click',\r\n            custom_popup_html: null,\r\n            language: 'en',\r\n        };\r\n        this.options = Object.assign({}, default_options, options);\r\n    }\r\n\r\n    setup_tasks(tasks) {\r\n        // prepare tasks\r\n        this.tasks = tasks.map((task, i) => {\r\n            // convert to Date objects\r\n            task._start = date_utils.parse(task.start);\r\n            task._end = date_utils.parse(task.end);\r\n\r\n            // make task invalid if duration too large\r\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\r\n                task.end = null;\r\n            }\r\n\r\n            // cache index\r\n            task._index = i;\r\n\r\n            // invalid dates\r\n            if (!task.start && !task.end) {\r\n                const today = date_utils.today();\r\n                task._start = today;\r\n                task._end = date_utils.add(today, 2, 'day');\r\n            }\r\n\r\n            if (!task.start && task.end) {\r\n                task._start = date_utils.add(task._end, -2, 'day');\r\n            }\r\n\r\n            if (task.start && !task.end) {\r\n                task._end = date_utils.add(task._start, 2, 'day');\r\n            }\r\n\r\n            // if hours is not set, assume the last day is full day\r\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\r\n            const task_end_values = date_utils.get_date_values(task._end);\r\n            if (task_end_values.slice(3).every((d) => d === 0)) {\r\n                task._end = date_utils.add(task._end, 24, 'hour');\r\n            }\r\n\r\n            // invalid flag\r\n            if (!task.start || !task.end) {\r\n                task.invalid = true;\r\n            }\r\n\r\n            // dependencies\r\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\r\n                let deps = [];\r\n                if (task.dependencies) {\r\n                    deps = task.dependencies\r\n                        .split(',')\r\n                        .map((d) => d.trim())\r\n                        .filter((d) => d);\r\n                }\r\n                task.dependencies = deps;\r\n            }\r\n\r\n            // uids\r\n            if (!task.id) {\r\n                task.id = generate_id(task);\r\n            }\r\n\r\n            return task;\r\n        });\r\n\r\n        this.setup_dependencies();\r\n    }\r\n\r\n    setup_context(context) {\r\n        this.context = context\r\n    }\r\n\r\n    setup_dependencies() {\r\n        this.dependency_map = {};\r\n        for (let t of this.tasks) {\r\n            for (let d of t.dependencies) {\r\n                this.dependency_map[d] = this.dependency_map[d] || [];\r\n                this.dependency_map[d].push(t.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    refresh(tasks) {\r\n        this.setup_tasks(tasks);\r\n        this.change_view_mode();\r\n    }\r\n\r\n    change_view_mode(mode = this.options.view_mode) {\r\n        this.update_view_scale(mode);\r\n        this.setup_dates();\r\n        this.render();\r\n        // fire viewmode_change event\r\n        this.trigger_event('view_change', [mode]);\r\n    }\r\n\r\n    update_view_scale(view_mode) {\r\n        this.options.view_mode = view_mode;\r\n\r\n        if (view_mode === VIEW_MODE.DAY) {\r\n            this.options.step = 24;\r\n            // this.options.column_width = 38;\r\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\r\n            this.options.step = 24 / 2;\r\n            // this.options.column_width = 38;\r\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\r\n            this.options.step = 24 / 4;\r\n            // this.options.column_width = 38;\r\n        } else if (view_mode === VIEW_MODE.HOUR) {\r\n            this.options.step = 1;\r\n        } else if (view_mode === VIEW_MODE.MINUTE) {\r\n            this.options.step = 1 / 12;\r\n        } else if (view_mode === VIEW_MODE.WEEK) {\r\n            this.options.step = 24 * 7;\r\n            // this.options.column_width = 140;\r\n        } else if (view_mode === VIEW_MODE.MONTH) {\r\n            this.options.step = 24 * 30;\r\n            // this.options.column_width = 120;\r\n        } else if (view_mode === VIEW_MODE.YEAR) {\r\n            this.options.step = 24 * 365;\r\n            // this.options.column_width = 120;\r\n        }\r\n    }\r\n\r\n    setup_dates() {\r\n        this.setup_gantt_dates();\r\n        this.setup_date_values();\r\n    }\r\n\r\n    setup_gantt_dates() {\r\n        \r\n        if (this.view_is([VIEW_MODE.MINUTE])) {\r\n            this.gantt_start = date_utils.add(new Date(), -10, 'minute')\r\n            this.gantt_end = date_utils.add(new Date(), 50, 'minute')\r\n        } else \r\n        if (this.view_is([VIEW_MODE.HOUR])) {\r\n            this.gantt_start = date_utils.add(new Date(), -2, 'hour')\r\n            this.gantt_end = date_utils.add(new Date(), 22, 'hour')\r\n        } else {\r\n            this.gantt_start = this.options.start\r\n            this.gantt_end = this.options.end\r\n        }\r\n\r\n        for (let task of this.tasks) {\r\n            // set global start and end date\r\n            if (!this.options.start && (!this.gantt_start || task._start < this.gantt_start)) {\r\n                this.gantt_start = task._start;\r\n            }\r\n            if (!this.options.end && (!this.gantt_end || task._end > this.gantt_end)) {\r\n                this.gantt_end = task._end;\r\n            }\r\n        }\r\n\r\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\r\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\r\n\r\n        // add date padding on both sides\r\n        // if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\r\n        //     this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\r\n        //     this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\r\n        // } else if (this.view_is(VIEW_MODE.MONTH)) {\r\n        //     this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\r\n        //     this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\r\n        // } else if (this.view_is(VIEW_MODE.YEAR)) {\r\n        //     this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\r\n        //     this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\r\n        // } else {\r\n        //     this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\r\n        //     this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\r\n        // }\r\n    }\r\n\r\n    setup_date_values() {\r\n        this.dates = [];\r\n        let cur_date = null;\r\n\r\n        while (cur_date === null || cur_date < this.gantt_end) {\r\n            if (!cur_date) {\r\n                cur_date = date_utils.clone(this.gantt_start);\r\n            } else {\r\n                if (this.view_is(VIEW_MODE.YEAR)) {\r\n                    cur_date = date_utils.add(cur_date, 1, 'year');\r\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\r\n                    cur_date = date_utils.add(cur_date, 1, 'month');\r\n                } else {\r\n                    cur_date = date_utils.add(\r\n                        cur_date,\r\n                        this.options.step,\r\n                        'hour'\r\n                    );\r\n                }\r\n            }\r\n            this.dates.push(cur_date);\r\n        }\r\n    }\r\n\r\n    bind_events() {\r\n        this.bind_grid_click();\r\n        this.bind_bar_events();\r\n    }\r\n\r\n    render() {\r\n        this.clear();\r\n        this.setup_layers();\r\n        this.make_grid();\r\n        this.make_dates();\r\n        this.make_bars();\r\n        this.make_arrows();\r\n        this.map_arrows_on_bars();\r\n        this.set_width();\r\n        this.set_scroll_position();\r\n    }\r\n\r\n    setup_layers() {\r\n        this.layers = {};\r\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\r\n        // make group layers\r\n        for (let layer of layers) {\r\n            this.layers[layer] = createSVG('g', {\r\n                class: layer,\r\n                append_to: this.$svg,\r\n            });\r\n        }\r\n    }\r\n\r\n    make_grid() {\r\n        this.make_grid_background();\r\n        this.make_grid_rows();\r\n        this.make_grid_header();\r\n        this.make_grid_ticks();\r\n        this.make_grid_highlights();\r\n    }\r\n\r\n    make_grid_background() {\r\n        const grid_width = this.dates.length * this.options.column_width;\r\n        const grid_height =\r\n            this.options.header_height +\r\n            this.options.padding +\r\n            (this.options.bar_height + this.options.padding) *\r\n                this.tasks.length;\r\n\r\n        this.context.grid_width = grid_width\r\n        this.context.grid_height = grid_height\r\n        \r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: grid_width,\r\n            height: grid_height,\r\n            class: 'grid-background',\r\n            append_to: this.layers.grid,\r\n        });\r\n\r\n        $.attr(this.$svg, {\r\n            // height: grid_height + this.options.padding + 100,\r\n            height: grid_height - 7, // Warning! Hard-coded\r\n            width: '100%',\r\n        });\r\n    }\r\n\r\n    make_grid_rows() {\r\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\r\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\r\n\r\n        const row_width = this.dates.length * this.options.column_width;\r\n        const row_height = this.options.bar_height + this.options.padding;\r\n\r\n        let row_y = this.options.header_height + this.options.padding / 2;\r\n\r\n        for (let task of this.tasks) {\r\n            createSVG('rect', {\r\n                x: 0,\r\n                y: row_y,\r\n                width: row_width,\r\n                height: row_height,\r\n                class: 'grid-row',\r\n                append_to: rows_layer,\r\n            });\r\n\r\n            createSVG('line', {\r\n                x1: 0,\r\n                y1: row_y + row_height,\r\n                x2: row_width,\r\n                y2: row_y + row_height,\r\n                class: 'row-line',\r\n                append_to: lines_layer,\r\n            });\r\n\r\n            row_y += this.options.bar_height + this.options.padding;\r\n        }\r\n    }\r\n\r\n    make_grid_header() {\r\n        const header_width = this.dates.length * this.options.column_width;\r\n        const header_height = this.options.header_height + 10;\r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: header_width,\r\n            height: header_height,\r\n            class: 'grid-header',\r\n            append_to: this.layers.grid,\r\n        });\r\n    }\r\n\r\n    make_grid_ticks() {\r\n        let tick_x = 0;\r\n        let tick_y = this.options.header_height + this.options.padding / 2;\r\n        let tick_height =\r\n            (this.options.bar_height + this.options.padding) *\r\n            this.tasks.length;\r\n\r\n        for (let date of this.dates) {\r\n            let tick_class = 'tick';\r\n            // thick tick for monday\r\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\r\n                tick_class += ' thick';\r\n            }\r\n            // thick tick for first week\r\n            if (\r\n                this.view_is(VIEW_MODE.WEEK) &&\r\n                date.getDate() >= 1 &&\r\n                date.getDate() < 8\r\n            ) {\r\n                tick_class += ' thick';\r\n            }\r\n            // thick ticks for quarters\r\n            if (\r\n                this.view_is(VIEW_MODE.MONTH) &&\r\n                (date.getMonth() + 1) % 3 === 0\r\n            ) {\r\n                tick_class += ' thick';\r\n            }\r\n\r\n            createSVG('path', {\r\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\r\n                class: tick_class,\r\n                append_to: this.layers.grid,\r\n            });\r\n\r\n            if (this.view_is(VIEW_MODE.MONTH)) {\r\n                tick_x +=\r\n                    (date_utils.get_days_in_month(date) *\r\n                        this.options.column_width) /\r\n                    30;\r\n            } else {\r\n                tick_x += this.options.column_width;\r\n            }\r\n        }\r\n    }\r\n\r\n    make_grid_highlights() {\r\n        // highlight today's date\r\n        if (this.view_is(VIEW_MODE.DAY)) {\r\n            const x =\r\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\r\n                    this.options.step) *\r\n                this.options.column_width;\r\n            const y = 0;\r\n\r\n            const width = this.options.column_width;\r\n            const height =\r\n                (this.options.bar_height + this.options.padding) *\r\n                    this.tasks.length +\r\n                this.options.header_height +\r\n                this.options.padding / 2;\r\n\r\n            createSVG('rect', {\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                class: 'today-highlight',\r\n                append_to: this.layers.grid,\r\n            });\r\n        }\r\n    }\r\n\r\n    make_dates() {\r\n        if (this.dates.length === 0) {\r\n            return\r\n        }\r\n        for (let date_info of this.get_dates_to_draw()) {\r\n            createSVG('text', {\r\n                x: date_info.lower_x,\r\n                y: date_info.lower_y,\r\n                innerHTML: date_info.lower_text,\r\n                class: 'lower-text',\r\n                append_to: this.layers.date,\r\n            });\r\n\r\n            if (date_info.is_weekend && this.view_is(VIEW_MODE.DAY)) {\r\n                const x =\r\n                (date_utils.diff(date_info.date, this.gantt_start, 'hour') /\r\n                    this.options.step) *\r\n                this.options.column_width;\r\n                const y = this.options.header_height + \r\n                    (this.options.padding /  2);\r\n\r\n                const width = this.options.column_width;\r\n                const height =\r\n                    (this.options.bar_height + this.options.padding) *\r\n                        this.tasks.length //+\r\n                    // this.options.padding / 2;\r\n\r\n                createSVG('rect', {\r\n                    x,\r\n                    y,\r\n                    width,\r\n                    height,\r\n                    class: 'weekend-highlight',\r\n                    append_to: this.layers.grid,\r\n                });\r\n            }\r\n\r\n            if (date_info.upper_text) {\r\n                const $upper_text = createSVG('text', {\r\n                    x: date_info.upper_x,\r\n                    y: date_info.upper_y,\r\n                    innerHTML: date_info.upper_text,\r\n                    class: 'upper-text',\r\n                    append_to: this.layers.date,\r\n                });\r\n\r\n                // remove out-of-bound dates\r\n                if (\r\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\r\n                ) {\r\n                    $upper_text.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get_dates_to_draw() {\r\n        let last_date = null;\r\n        const first_date = this.dates[0]\r\n        const final_date = this.dates[this.dates.length-1]\r\n        const time_diff = final_date.getTime() - first_date.getTime()\r\n        const dates_span = time_diff / (1000 * 3600 * 24)\r\n        const dates = this.dates.map((date, i) => {\r\n            const d = this.get_date_info(date, last_date, i, dates_span);\r\n            last_date = date;\r\n            return d;\r\n        });\r\n        return dates;\r\n    }\r\n\r\n    get_date_info(date, last_date, i, dates_span) {\r\n        if (!last_date) {\r\n            // last_date = date_utils.add(date, -1, 'year');\r\n            last_date = date_utils.add(date, -1, 'month')\r\n            last_date = date_utils.add(last_date, -1, 'day')\r\n        }\r\n        const base_pos = {\r\n            x: i * this.options.column_width,\r\n            lower_y: this.options.header_height,\r\n            upper_y: this.options.header_height - 25,\r\n        };\r\n\r\n        const days_per_month = new Date(date.getYear(), date.getMonth()+1, 0).getDate()\r\n        const current_day = date.getDate()\r\n        const days_span = Math.min(dates_span, days_per_month - current_day)\r\n        const lower_text_font_width = 18\r\n        const month_span = (this.options.column_width * days_span)\r\n        const lower_column_threshold = Math.ceil(lower_text_font_width / this.options.column_width)\r\n        const correct_lower_text_mod = i % lower_column_threshold === 0\r\n        const date_text = {\r\n            // 'Quarter Day_lower': date_utils.format(\r\n            //     date,\r\n            //     'HH',\r\n            //     this.options.language\r\n            // ),\r\n            // 'Half Day_lower': date_utils.format(\r\n            //     date,\r\n            //     'HH',\r\n            //     this.options.language\r\n            // ),\r\n            '5 Minute_lower': date_utils.format(\r\n                date,\r\n                'HH',\r\n                this.options.language\r\n            ),\r\n            'Hour_lower': date_utils.format(\r\n                date,\r\n                'HH',\r\n                this.options.language\r\n            ),\r\n            Day_lower:\r\n                (correct_lower_text_mod && (date.getDate() !== last_date.getDate() || i === 0))\r\n                    ? date_utils.format(date, 'D', this.options.language)\r\n                    : '',\r\n            Day_upper:\r\n                (date.getMonth() !== last_date.getMonth() || i === 0)\r\n                    ? date_utils.format(date, 'MMMM', this.options.language)\r\n                    : '',\r\n            // Week_lower:\r\n            //     date.getMonth() !== last_date.getMonth()\r\n            //         ? date_utils.format(date, 'D MMM', this.options.language)\r\n            //         : date_utils.format(date, 'D', this.options.language),\r\n            // Month_lower: date_utils.format(date, 'MMMM', this.options.language),\r\n            // Year_lower: date_utils.format(date, 'YYYY', this.options.language),\r\n            // 'Quarter Day_upper':\r\n            //     date.getDate() !== last_date.getDate()\r\n            //         ? date_utils.format(date, 'D MMM', this.options.language)\r\n            //         : '',\r\n            // 'Half Day_upper':\r\n            //     date.getDate() !== last_date.getDate()\r\n            //         ? date.getMonth() !== last_date.getMonth()\r\n            //             ? date_utils.format(\r\n            //                   date,\r\n            //                   'D MMM',\r\n            //                   this.options.language\r\n            //               )\r\n            //             : date_utils.format(date, 'D', this.options.language)\r\n            //         : '',\r\n            '5 Minute_upper':\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date_utils.format(date, 'D MMM', this.options.language)\r\n                    : '',\r\n            'Hour_upper':\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date.getMonth() !== last_date.getMonth()\r\n                        ? date_utils.format(\r\n                              date,\r\n                              'D MMM',\r\n                              this.options.language\r\n                          )\r\n                        : date_utils.format(date, 'D', this.options.language)\r\n                    : '',\r\n            // Week_upper:\r\n            //     date.getMonth() !== last_date.getMonth()\r\n            //         ? date_utils.format(date, 'MMMM', this.options.language)\r\n            //         : '',\r\n            // Month_upper:\r\n            //     date.getFullYear() !== last_date.getFullYear()\r\n            //         ? date_utils.format(date, 'YYYY', this.options.language)\r\n            //         : '',\r\n            // Year_upper:\r\n            //     date.getFullYear() !== last_date.getFullYear()\r\n            //         ? date_utils.format(date, 'YYYY', this.options.language)\r\n            //         : '',\r\n        };\r\n\r\n        const x_pos = {\r\n            // 'Quarter Day_lower': (this.options.column_width * 4) / 2,\r\n            // 'Quarter Day_upper': 0,\r\n            // 'Half Day_lower': (this.options.column_width * 2) / 2,\r\n            // 'Half Day_upper': 0,\r\n            '5 Minute_lower': (this.options.column_width * 12 * 24) / 2,\r\n            '5 Minute_upper': 0,\r\n            Hour_lower: (this.options.column_width * 24) / 2,\r\n            Hour_upper: 0,\r\n            Day_lower: this.options.column_width / 2,\r\n            // Day_upper: (this.options.column_width * 30) / 2,\r\n            Day_upper: month_span / 2,\r\n            // Week_lower: 0,\r\n            // Week_upper: (this.options.column_width * 4) / 2,\r\n            // Month_lower: this.options.column_width / 2,\r\n            // Month_upper: (this.options.column_width * 12) / 2,\r\n            // Year_lower: this.options.column_width / 2,\r\n            // Year_upper: (this.options.column_width * 30) / 2,\r\n        };\r\n\r\n        // Sunday = 0, Saturday = 6\r\n        const is_weekend = [0, 6].includes(date.getDay()) \r\n\r\n        return {\r\n            upper_text: date_text[`${this.options.view_mode}_upper`],\r\n            lower_text: date_text[`${this.options.view_mode}_lower`],\r\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\r\n            upper_y: base_pos.upper_y,\r\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\r\n            lower_y: base_pos.lower_y,\r\n            is_weekend: is_weekend,\r\n            date: date\r\n        };\r\n    }\r\n\r\n    make_bars() {\r\n        this.bars = this.tasks.map((task) => {\r\n            const bar = new Bar(this, task, this.context);\r\n            this.layers.bar.appendChild(bar.group);\r\n            return bar;\r\n        });\r\n    }\r\n\r\n    make_arrows() {\r\n        this.arrows = [];\r\n        for (let task of this.tasks) {\r\n            let arrows = [];\r\n            arrows = task.dependencies\r\n                .map((task_id) => {\r\n                    const dependency = this.get_task(task_id);\r\n                    if (!dependency) return;\r\n                    const arrow = new Arrow(\r\n                        this,\r\n                        this.bars[dependency._index], // from_task\r\n                        this.bars[task._index] // to_task\r\n                    );\r\n                    this.layers.arrow.appendChild(arrow.element);\r\n                    return arrow;\r\n                })\r\n                .filter(Boolean); // filter falsy values\r\n            this.arrows = this.arrows.concat(arrows);\r\n        }\r\n    }\r\n\r\n    map_arrows_on_bars() {\r\n        for (let bar of this.bars) {\r\n            bar.arrows = this.arrows.filter((arrow) => {\r\n                return (\r\n                    arrow.from_task.task.id === bar.task.id ||\r\n                    arrow.to_task.task.id === bar.task.id\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    set_width() {\r\n        const cur_width = this.$svg.getBoundingClientRect().width;\r\n        const actual_width = this.$svg\r\n            .querySelector('.grid .grid-row')\r\n            .getAttribute('width');\r\n        if (cur_width < actual_width) {\r\n            this.$svg.setAttribute('width', actual_width);\r\n        }\r\n    }\r\n\r\n    set_scroll_position() {\r\n        const parent_element = this.$svg.parentElement;\r\n        if (!parent_element) return;\r\n\r\n        const hours_before_first_task = date_utils.diff(\r\n            this.get_oldest_starting_date(),\r\n            this.gantt_start,\r\n            'hour'\r\n        );\r\n\r\n        const scroll_pos =\r\n            (hours_before_first_task / this.options.step) *\r\n                this.options.column_width -\r\n            this.options.column_width;\r\n\r\n        parent_element.scrollLeft = scroll_pos;\r\n    }\r\n\r\n    bind_grid_click() {\r\n        $.on(\r\n            this.$svg,\r\n            this.options.popup_trigger,\r\n            '.grid-row, .grid-header',\r\n            () => {\r\n                this.unselect_all();\r\n                this.hide_popup();\r\n            }\r\n        );\r\n    }\r\n\r\n    bind_bar_events() {\r\n        let is_dragging = false;\r\n        let x_on_start = 0;\r\n        let y_on_start = 0;\r\n        let is_resizing_left = false;\r\n        let is_resizing_right = false;\r\n        let parent_bar_id = null;\r\n        let bars = []; // instanceof Bar\r\n        this.bar_being_dragged = null;\r\n\r\n        function action_in_progress() {\r\n            return is_dragging || is_resizing_left || is_resizing_right;\r\n        }\r\n\r\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\r\n            const bar_wrapper = $.closest('.bar-wrapper', element);\r\n\r\n            if (element.classList.contains('left')) {\r\n                is_resizing_left = true;\r\n            } else if (element.classList.contains('right')) {\r\n                is_resizing_right = true;\r\n            } else if (element.classList.contains('bar-wrapper')) {\r\n                is_dragging = true;\r\n            }\r\n\r\n            bar_wrapper.classList.add('active');\r\n\r\n            x_on_start = e.offsetX;\r\n            y_on_start = e.offsetY;\r\n\r\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\r\n            const ids = [\r\n                parent_bar_id,\r\n                ...this.get_all_dependent_tasks(parent_bar_id),\r\n            ];\r\n            bars = ids.map((id) => this.get_bar(id));\r\n\r\n            this.bar_being_dragged = parent_bar_id;\r\n\r\n            bars.forEach((bar) => {\r\n                const $bar = bar.$bar;\r\n                $bar.ox = $bar.getX();\r\n                $bar.oy = $bar.getY();\r\n                $bar.owidth = $bar.getWidth();\r\n                $bar.finaldx = 0;\r\n            });\r\n        });\r\n\r\n        $.on(this.$svg, 'mousemove', (e) => {\r\n            if (!action_in_progress()) return;\r\n            const dx = e.offsetX - x_on_start;\r\n            const dy = e.offsetY - y_on_start;\r\n\r\n            bars.forEach((bar) => {\r\n                const $bar = bar.$bar;\r\n                $bar.finaldx = this.get_snap_position(dx);\r\n                this.hide_popup();\r\n                if (is_resizing_left) {\r\n                    if (parent_bar_id === bar.task.id) {\r\n                        bar.update_bar_position({\r\n                            x: $bar.ox + $bar.finaldx,\r\n                            width: $bar.owidth - $bar.finaldx,\r\n                        });\r\n                    } else {\r\n                        bar.update_bar_position({\r\n                            x: $bar.ox + $bar.finaldx,\r\n                        });\r\n                    }\r\n                } else if (is_resizing_right) {\r\n                    if (parent_bar_id === bar.task.id) {\r\n                        bar.update_bar_position({\r\n                            width: $bar.owidth + $bar.finaldx,\r\n                        });\r\n                    }\r\n                } else if (is_dragging) {\r\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\r\n                }\r\n            });\r\n        });\r\n\r\n        document.addEventListener('mouseup', (e) => {\r\n            if (is_dragging || is_resizing_left || is_resizing_right) {\r\n                bars.forEach((bar) => bar.group.classList.remove('active'));\r\n            }\r\n\r\n            is_dragging = false;\r\n            is_resizing_left = false;\r\n            is_resizing_right = false;\r\n        });\r\n\r\n        $.on(this.$svg, 'mouseup', (e) => {\r\n            this.bar_being_dragged = null;\r\n            bars.forEach((bar) => {\r\n                const $bar = bar.$bar;\r\n                if (!$bar.finaldx) return;\r\n                bar.date_changed();\r\n                bar.set_action_completed();\r\n            });\r\n        });\r\n\r\n        this.bind_bar_progress();\r\n    }\r\n\r\n    bind_bar_progress() {\r\n        let x_on_start = 0;\r\n        let y_on_start = 0;\r\n        let is_resizing = null;\r\n        let bar = null;\r\n        let $bar_progress = null;\r\n        let $bar = null;\r\n\r\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\r\n            is_resizing = true;\r\n            x_on_start = e.offsetX;\r\n            y_on_start = e.offsetY;\r\n\r\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\r\n            const id = $bar_wrapper.getAttribute('data-id');\r\n            bar = this.get_bar(id);\r\n\r\n            $bar_progress = bar.$bar_progress;\r\n            $bar = bar.$bar;\r\n\r\n            $bar_progress.finaldx = 0;\r\n            $bar_progress.owidth = $bar_progress.getWidth();\r\n            $bar_progress.min_dx = -$bar_progress.getWidth();\r\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\r\n        });\r\n\r\n        $.on(this.$svg, 'mousemove', (e) => {\r\n            if (!is_resizing) return;\r\n            let dx = e.offsetX - x_on_start;\r\n            let dy = e.offsetY - y_on_start;\r\n\r\n            if (dx > $bar_progress.max_dx) {\r\n                dx = $bar_progress.max_dx;\r\n            }\r\n            if (dx < $bar_progress.min_dx) {\r\n                dx = $bar_progress.min_dx;\r\n            }\r\n\r\n            const $handle = bar.$handle_progress;\r\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\r\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\r\n            $bar_progress.finaldx = dx;\r\n        });\r\n\r\n        $.on(this.$svg, 'mouseup', () => {\r\n            is_resizing = false;\r\n            if (!($bar_progress && $bar_progress.finaldx)) return;\r\n            bar.progress_changed();\r\n            bar.set_action_completed();\r\n        });\r\n    }\r\n\r\n    get_all_dependent_tasks(task_id) {\r\n        let out = [];\r\n        let to_process = [task_id];\r\n        while (to_process.length) {\r\n            const deps = to_process.reduce((acc, curr) => {\r\n                acc = acc.concat(this.dependency_map[curr]);\r\n                return acc;\r\n            }, []);\r\n\r\n            out = out.concat(deps);\r\n            to_process = deps.filter((d) => !to_process.includes(d));\r\n        }\r\n\r\n        return out.filter(Boolean);\r\n    }\r\n\r\n    get_snap_position(dx) {\r\n        let odx = dx,\r\n            rem,\r\n            position;\r\n\r\n        if (this.view_is(VIEW_MODE.WEEK)) {\r\n            rem = dx % (this.options.column_width / 7);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 14\r\n                    ? 0\r\n                    : this.options.column_width / 7);\r\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\r\n            rem = dx % (this.options.column_width / 30);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 60\r\n                    ? 0\r\n                    : this.options.column_width / 30);\r\n        } else {\r\n            rem = dx % this.options.column_width;\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 2\r\n                    ? 0\r\n                    : this.options.column_width);\r\n        }\r\n        return position;\r\n    }\r\n\r\n    unselect_all() {\r\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\r\n            el.classList.remove('active');\r\n        });\r\n    }\r\n\r\n    view_is(modes) {\r\n        if (typeof modes === 'string') {\r\n            return this.options.view_mode === modes;\r\n        }\r\n\r\n        if (Array.isArray(modes)) {\r\n            return modes.some((mode) => this.options.view_mode === mode);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get_task(id) {\r\n        return this.tasks.find((task) => {\r\n            return task.id === id;\r\n        });\r\n    }\r\n\r\n    get_bar(id) {\r\n        return this.bars.find((bar) => {\r\n            return bar.task.id === id;\r\n        });\r\n    }\r\n\r\n    show_popup(options) {\r\n        if (!this.popup) {\r\n            this.popup = new Popup(\r\n                this.popup_wrapper,\r\n                this.options.custom_popup_html,\r\n                options.grid_size\r\n            );\r\n        }\r\n        this.popup.show(options);\r\n    }\r\n\r\n    hide_popup() {\r\n        this.popup && this.popup.hide();\r\n    }\r\n\r\n    trigger_event(event, args) {\r\n        if (this.options['on_' + event]) {\r\n            this.options['on_' + event].apply(null, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the oldest starting date from the list of tasks\r\n     *\r\n     * @returns Date\r\n     * @memberof Gantt\r\n     */\r\n    get_oldest_starting_date() {\r\n        return this.tasks\r\n            .map((task) => task._start)\r\n            .reduce((prev_date, cur_date) =>\r\n                cur_date <= prev_date ? cur_date : prev_date\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Clear all elements from the parent svg element\r\n     *\r\n     * @memberof Gantt\r\n     */\r\n    clear() {\r\n        this.$svg.innerHTML = '';\r\n    }\r\n}\r\n\r\nGantt.VIEW_MODE = VIEW_MODE;\r\n\r\nfunction generate_id(task) {\r\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\r\n}\r\n"],"names":["$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","values","keyTimes","keySplines","cubic_bezier","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","split","forEach","addEventListener","e","delegatedTarget","target","closest","call","this","matches","parentNode","value","getAttribute","key","Arrow","constructor","gantt","from_task","to_task","calculate_path","draw","start_x","$bar","getX","getWidth","condition","options","padding","start_y","header_height","bar_height","task","_index","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","getY","getHeight","left","d","id","update","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","month_names","en","gb","de","es","it","ru","ptBr","fr","tr","zh","date_utils","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","includes","replace","push","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","slice","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","should_reset","_scale","clone","get_days_in_month","no_of_days","month","year","targetLength","padString","String","repeat","Bar","context","set_defaults","prepare","action_completed","prepare_values","prepare_helpers","invalid","height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","bar_group","handle_group","SVGElement","prototype","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","rx","ry","classList","$bar_progress","requestAnimationFrame","update_label_position","bar","$handle_progress","points","get_progress_polygon_points","join","bar_progress","setup_click_event","popup_trigger","show_popup","unselect_all","trigger_event","bar_being_dragged","subtitle","language","target_element","title","grid_size","grid_height","grid_width","update_bar_position","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","gantt_start","width_in_units","task_start","view_is","get_snap_position","dx","rem","position","odx","isNaN","label","getBBox","remove","handle","arrows","arrow","Popup","parent","custom_html","make","hide","pointer","show","Error","html","style","clientWidth","position_meta","HTMLElement","getBoundingClientRect","right_side_space","top","clientHeight","transform","opacity","VIEW_MODE","QUARTER_DAY","HALF_DAY","WEEK","Gantt","wrapper","tasks","setup_wrapper","setup_options","setup_tasks","setup_context","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","default_options","view_modes","view_mode","date_format","custom_popup_html","assign","start","end","every","deps","trim","filter","random","toString","generate_id","setup_dependencies","dependency_map","t","refresh","mode","update_view_scale","setup_dates","render","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","tick_x","tick_y","tick_height","tick_class","date_info","get_dates_to_draw","lower_x","lower_y","lower_text","is_weekend","upper_text","$upper_text","upper_x","upper_y","last_date","first_date","dates_span","getTime","get_date_info","base_pos","days_per_month","getYear","current_day","days_span","min","month_span","correct_lower_text_mod","ceil","date_text","Hour_lower","Day_lower","Day_upper","Hour_upper","x_pos","getDay","bars","task_id","dependency","get_task","Boolean","cur_width","actual_width","parent_element","scroll_pos","get_oldest_starting_date","scrollLeft","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_wrapper","contains","offsetX","offsetY","ids","get_all_dependent_tasks","ox","oy","owidth","finaldx","bind_bar_progress","is_resizing","min_dx","max_dx","$handle","out","to_process","acc","querySelectorAll","el","modes","Array","isArray","some","find","popup","args","apply","prev_date"],"mappings":"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UACA,WACA,YAEJC,GAAI,CACA,SACA,UACA,OACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,QACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,aACA,UACA,YACA,aAEJC,GAAI,CACA,UACA,WACA,QACA,SACA,SACA,SACA,SACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,SACA,UACA,OACA,SACA,MACA,OACA,OACA,SACA,WACA,UACA,SACA,WAEJC,KAAM,CACF,UACA,YACA,QACA,QACA,OACA,QACA,QACA,SACA,WACA,UACA,WACA,YAEJC,GAAI,CACA,UACA,UACA,OACA,QACA,MACA,OACA,UACA,OACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,OACA,QACA,OACA,QACA,QACA,UACA,SACA,UACA,QACA,OACA,QACA,UAEJC,GAAI,CACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,QAIO,IAAAC,EAAA,CACXC,MAAMC,EAAMC,EAAiB,IAAKC,EAAiB,QAC/C,GAAIF,aAAgBG,KAChB,OAAOH,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,IAAII,EAAYC,EAChB,MAAMC,EAAQN,EAAKtE,MAAM,KAEzB0E,EAAaE,EAAM,GACd5E,MAAMuE,GACNM,KAAKC,GAAQC,SAASD,EAAK,MAChCH,EAAaC,EAAM,IAAMA,EAAM,GAAG5E,MAAMwE,GAGxCE,EAAW,GAAKA,EAAW,GAAK,EAEhC,IAAIM,EAAON,EAUX,OARIC,GAAcA,EAAWM,SACA,GAArBN,EAAWM,SACXN,EAAW,GAAK,KAAOA,EAAW,GAClCA,EAAW,GAAiC,IAA5BO,WAAWP,EAAW,KAE1CK,EAAOA,EAAKG,OAAOR,IAGhB,IAAIF,QAAQO,KAI3BI,UAAUd,EAAMe,GAAY,GACxB,KAAMf,aAAgBG,MAClB,MAAM,IAAIa,UAAU,yBAExB,MAAMN,EAAOxE,KAAK+E,gBAAgBjB,GAAMO,KAAI,CAACC,EAAKU,KACpC,IAANA,IAEAV,GAAY,GAILW,EAASX,EAAM,GADhB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"}